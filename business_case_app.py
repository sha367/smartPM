import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime, timedelta
import uuid
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import tempfile
import shutil

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üéØ Business Case Manager",
    page_icon="üéØ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EXCEL_FILES = {
    "mikhailenko": {
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ú–∏—Ö–Ω–µ–Ω–∫–æ_–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞.xlsx",
        "name": "–î–∏–Ω–∞—Å—Ç–∏—è –í—Ä–∞—á–µ–π - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏",
        "owner": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∏—Ö–Ω–µ–Ω–∫–æ",
        "description": "–î–æ—Å—Ç–∏—á—å –ø–ª–∞–Ω–æ–≤–æ–π –≤—ã—Ä—É—á–∫–∏ 35 –º–ª–Ω —Ä—É–±–ª–µ–π –∑–∞ —Å—á—ë—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    },
    "zyryanova": {
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ó—ã—Ä—è–Ω–æ–≤–∞.xlsx", 
        "name": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–∑ –ö–≠–í–∞ –≤ –æ–ø–ª–∞—Ç—É",
        "owner": "–ó—ã—Ä—è–Ω–æ–≤–∞",
        "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, —É—Å–∏–ª–µ–Ω–∏–µ –ö–≠–í–∞"
    },
    "amerkhanov": {
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å. –†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤.xlsx",
        "name": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∏–∑ –ª–∏–¥–∞ –≤ –∑–∞–ø–∏—Å—å", 
        "owner": "–†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤",
        "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≤–≤–µ–¥–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞, —Ä–æ–ª–µ–≤–∫–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
    }
}

SECTION_NAMES = {
    "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": {
        "icon": "üìã",
        "description": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ"
    },
    "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ": {
        "icon": "üí∞", 
        "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã"
    },
    "c. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã": {
        "icon": "üìä",
        "description": "–†–∞—Å—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    },
    "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞": {
        "icon": "üìÖ",
        "description": "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞"
    },
    "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞": {
        "icon": "üìà",
        "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    },
    "f. –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤": {
        "icon": "‚ö°",
        "description": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"
    }
}

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_business_case_data(business_case_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞"""
    if business_case_id not in EXCEL_FILES:
        return None
    
    file_info = EXCEL_FILES[business_case_id]
    file_path = file_info["file"]
    
    if not os.path.exists(file_path):
        st.error(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
        excel_data = pd.read_excel(file_path, sheet_name=None)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
        processed_data = {}
        for sheet_name, df in excel_data.items():
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            clean_df = clean_dataframe(df)
            processed_data[sheet_name] = clean_df
            
        return {
            "data": processed_data,
            "meta": file_info,
            "file_path": file_path
        }
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def clean_dataframe(df):
    """–û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º DataFrame"""
    if df.empty:
        return df
    
    # –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    df = df.fillna('')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_editor
    for col in df.columns:
        df[col] = df[col].astype(str)
        df[col] = df[col].replace(['nan', 'None', '<NA>'], '')
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    new_columns = []
    for i, col in enumerate(df.columns):
        col_str = str(col)
        if col_str.startswith('Unnamed:') or col_str.isdigit():
            new_columns.append(f"–°—Ç–æ–ª–±–µ—Ü_{i+1}")
        else:
            new_columns.append(col_str)
    
    df.columns = new_columns
    
    return df

def create_summary_dashboard():
    """–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é –¥–∞—à–±–æ—Ä–¥ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º"""
    st.header("üìä –°–≤–æ–¥–Ω–∞—è –¥–∞—à–±–æ—Ä–¥ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    all_projects_data = {}
    for project_id in EXCEL_FILES.keys():
        data = load_business_case_data(project_id)
        if data:
            all_projects_data[project_id] = data
    
    if not all_projects_data:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ (—É–±—Ä–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", len(all_projects_data))
    
    with col2:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        total_effect_2025 = 0
        for project_data in all_projects_data.values():
            finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
            if not finance_data.empty and "2025" in finance_data.columns:
                try:
                    effect = float(finance_data["2025"].iloc[0]) if len(finance_data) > 0 else 0
                    total_effect_2025 += effect
                except:
                    pass
        st.metric("–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç 2025", f"{total_effect_2025} –º–ª–Ω ‚ÇΩ")
    
    with col3:
        # –°—á–∏—Ç–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç 2026
        total_effect_2026 = 0
        for project_data in all_projects_data.values():
            finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
            if not finance_data.empty and "2026" in finance_data.columns:
                try:
                    effect = float(finance_data["2026"].iloc[0]) if len(finance_data) > 0 else 0
                    total_effect_2026 += effect
                except:
                    pass
        st.metric("–û–±—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç 2026", f"{total_effect_2026} –º–ª–Ω ‚ÇΩ")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    st.subheader("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –≥–æ–¥–∞–º")
    
    years = ["2025", "2026", "2027"]
    chart_data = []
    
    for project_id, project_data in all_projects_data.items():
        project_name = EXCEL_FILES[project_id]["name"]
        finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
        
        for year in years:
            if not finance_data.empty and year in finance_data.columns:
                try:
                    value = float(finance_data[year].iloc[0]) if len(finance_data) > 0 else 0
                    chart_data.append({
                        "–ü—Ä–æ–µ–∫—Ç": project_name,
                        "–ì–æ–¥": year,
                        "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": value
                    })
                except:
                    chart_data.append({
                        "–ü—Ä–æ–µ–∫—Ç": project_name,
                        "–ì–æ–¥": year,
                        "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": 0
                    })
    
    if chart_data:
        chart_df = pd.DataFrame(chart_data)
        fig = px.bar(chart_df, x="–ì–æ–¥", y="–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)", 
                     color="–ü—Ä–æ–µ–∫—Ç", title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –∏ –≥–æ–¥–∞–º")
        st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
    st.subheader("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    projects_summary = []
    for project_id, project_data in all_projects_data.items():
        project_info = EXCEL_FILES[project_id]
        details_data = project_data["data"].get("a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", pd.DataFrame())
        
        if not details_data.empty:
            initiative_name = details_data.iloc[0, 0] if len(details_data) > 0 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            description = details_data.iloc[0, 1] if len(details_data.columns) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            responsible = details_data.iloc[0, 2] if len(details_data.columns) > 2 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        else:
            initiative_name = project_info["name"]
            description = project_info["description"]
            responsible = project_info["owner"]
        
        projects_summary.append({
            "–ü—Ä–æ–µ–∫—Ç": initiative_name,
            "–û–ø–∏—Å–∞–Ω–∏–µ": description[:100] + "..." if len(description) > 100 else description,
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": responsible,
            "–í–ª–∞–¥–µ–ª–µ—Ü": project_info["owner"]
        })
    
    if projects_summary:
        summary_df = pd.DataFrame(projects_summary)
        st.dataframe(summary_df, use_container_width=True)

def show_project_management():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    st.header("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
    
    tabs = st.tabs(["üìù –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"])
    
    with tabs[0]:
        show_projects_list()
    
    with tabs[1]:
        show_add_project_form()
    
    with tabs[2]:
        show_project_management_tools()

def show_projects_list():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    st.subheader("üìù –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    projects_data = []
    for project_id, project_info in EXCEL_FILES.items():
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        data = load_business_case_data(project_id)
        status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if data else "‚ùå –û—à–∏–±–∫–∞"
        
        projects_data.append({
            "ID": project_id,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": project_info["name"],
            "–í–ª–∞–¥–µ–ª–µ—Ü": project_info["owner"],
            "–û–ø–∏—Å–∞–Ω–∏–µ": project_info["description"][:50] + "...",
            "–§–∞–π–ª": project_info["file"],
            "–°—Ç–∞—Ç—É—Å": status
        })
    
    if projects_data:
        df = pd.DataFrame(projects_data)
        st.dataframe(df, use_container_width=True)
    else:
        st.info("üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def show_add_project_form():
    """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    
    with st.form("add_project_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            project_name = st.text_input("üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *", 
                                       placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
            project_owner = st.text_input("üë§ –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ *",
                                        placeholder="–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞")
            
        with col2:
            project_description = st.text_area("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *",
                                             placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                                             height=100)
        
        uploaded_file = st.file_uploader("üìé Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
                                       type=['xlsx', 'xls'],
                                       help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞")
        
        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", type="primary")
        
        if submitted:
            if not project_name or not project_owner or not project_description:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            elif not uploaded_file:
                st.error("‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                success = add_new_project(project_name, project_owner, project_description, uploaded_file)
                if success:
                    st.success("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")

def add_new_project(name, owner, description, uploaded_file):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        project_id = f"project_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_extension = uploaded_file.name.split('.')[-1]
        filename = f"–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_{owner.replace(' ', '_')}.{file_extension}"
        
        with open(filename, "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–µ–∫—Ç–æ–≤
        global EXCEL_FILES
        EXCEL_FILES[project_id] = {
            "file": filename,
            "name": name,
            "owner": owner,
            "description": description
        }
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        st.cache_data.clear()
        
        return True
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False

def show_project_management_tools():
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    st.subheader("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
    
    if not EXCEL_FILES:
        st.info("üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    project_options = {
        f"{info['name']} (ID: {project_id})": project_id 
        for project_id, info in EXCEL_FILES.items()
    }
    
    selected_project_display = st.selectbox(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        options=list(project_options.keys())
    )
    
    if selected_project_display:
        selected_project_id = project_options[selected_project_display]
        project_info = EXCEL_FILES[selected_project_id]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        st.info(f"""
        **–ù–∞–∑–≤–∞–Ω–∏–µ:** {project_info['name']}  
        **–í–ª–∞–¥–µ–ª–µ—Ü:** {project_info['owner']}  
        **–û–ø–∏—Å–∞–Ω–∏–µ:** {project_info['description']}  
        **–§–∞–π–ª:** {project_info['file']}
        """)
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", type="secondary"):
                success = delete_project(selected_project_id)
                if success:
                    st.success("‚úÖ –ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        
        with col2:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                st.cache_data.clear()
                st.success("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!")
                st.rerun()
        
        with col3:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
            if os.path.exists(project_info['file']):
                with open(project_info['file'], "rb") as file:
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å Excel",
                        data=file,
                        file_name=project_info['file'],
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

def delete_project(project_id):
    """–£–¥–∞–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç"""
    try:
        if project_id in EXCEL_FILES:
            project_info = EXCEL_FILES[project_id]
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(project_info['file']):
                os.remove(project_info['file'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del EXCEL_FILES[project_id]
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            st.cache_data.clear()
            
            return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False

def show_project_details(business_case_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    if business_case_id not in EXCEL_FILES:
        st.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        return
    
    project_info = EXCEL_FILES[business_case_id]
    st.header(f"üéØ {project_info['name']}")
    st.caption(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {project_info['owner']}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_data = load_business_case_data(business_case_id)
    if not project_data:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    tabs = st.tabs([f"{SECTION_NAMES[section]['icon']} {section}" for section in SECTION_NAMES.keys()])
    
    for i, (section_key, section_info) in enumerate(SECTION_NAMES.items()):
        with tabs[i]:
            st.subheader(f"{section_info['icon']} {section_key}")
            st.caption(section_info['description'])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞
            section_data = project_data["data"].get(section_key, pd.DataFrame())
            
            if section_data.empty:
                st.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section_key}'")
                continue
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if section_key == "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞":
                show_gantt_chart(section_data)
            elif section_key == "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞":
                show_monitoring_chart(section_data)
            elif section_key == "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ":
                show_financial_impact(section_data)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ '{section_key}'", key=f"refresh_{section_key}"):
                    st.cache_data.clear()
                    st.rerun()
                
                edited_df = st.data_editor(
                    section_data,
                    use_container_width=True,
                    num_rows="dynamic",
                    key=f"editor_{business_case_id}_{section_key}"
                )
                
                if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ '{section_key}'", key=f"save_{section_key}"):
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    st.success(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '{section_key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_gantt_chart(gantt_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞"""
    if gantt_data.empty or "–ó–∞–¥–∞—á–∞" not in gantt_data.columns:
        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞")
        st.dataframe(gantt_data, use_container_width=True)
        return
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        gantt_data = gantt_data.copy()
        gantt_data["–ù–∞—á–∞–ª–æ"] = pd.to_datetime(gantt_data["–ù–∞—á–∞–ª–æ"], errors='coerce')
        gantt_data["–ö–æ–Ω–µ—Ü"] = pd.to_datetime(gantt_data["–ö–æ–Ω–µ—Ü"], errors='coerce')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
        fig = px.timeline(
            gantt_data,
            x_start="–ù–∞—á–∞–ª–æ",
            x_end="–ö–æ–Ω–µ—Ü", 
            y="–ó–∞–¥–∞—á–∞",
            title="üìÖ –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        )
        fig.update_yaxes(autorange="reversed")
        st.plotly_chart(fig, use_container_width=True)
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
    edited_df = st.data_editor(
        gantt_data,
        use_container_width=True,
        num_rows="dynamic"
    )

def show_monitoring_chart(monitoring_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if monitoring_data.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return
    
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
    edited_df = st.data_editor(
        monitoring_data,
        use_container_width=True,
        num_rows="dynamic"
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        numeric_cols = []
        for col in monitoring_data.columns:
            if col != monitoring_data.columns[0]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—è)
                try:
                    pd.to_numeric(monitoring_data[col], errors='raise')
                    numeric_cols.append(col)
                except:
                    pass
        
        if numeric_cols:
            fig = go.Figure()
            for col in numeric_cols:
                fig.add_trace(go.Scatter(
                    x=monitoring_data[monitoring_data.columns[0]],
                    y=pd.to_numeric(monitoring_data[col], errors='coerce'),
                    mode='lines+markers',
                    name=col
                ))
            
            fig.update_layout(title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
            st.plotly_chart(fig, use_container_width=True)
            
    except Exception as e:
        st.info(f"‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

def show_financial_impact(finance_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    if finance_data.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    edited_df = st.data_editor(
        finance_data,
        use_container_width=True,
        num_rows="dynamic"
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≥–æ–¥–∞–º
    if len(finance_data) > 0:
        years = ["2025", "2026", "2027"]
        year_data = []
        
        for year in years:
            if year in finance_data.columns:
                try:
                    value = float(finance_data[year].iloc[0])
                    year_data.append({"–ì–æ–¥": year, "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": value})
                except:
                    year_data.append({"–ì–æ–¥": year, "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": 0})
        
        if year_data:
            year_df = pd.DataFrame(year_data)
            fig = px.bar(year_df, x="–ì–æ–¥", y="–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)", 
                        title="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –≥–æ–¥–∞–º")
            st.plotly_chart(fig, use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üéØ Business Case Manager")
    st.caption("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞–º–∏ v3.1")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        page = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
            ["üìä –°–≤–æ–¥–Ω–∞—è –¥–∞—à–±–æ—Ä–¥", "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", "üéØ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞"]
        )
        
        if page == "üéØ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞":
            if EXCEL_FILES:
                st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
                project_options = {
                    f"üéØ {info['name']}": project_id 
                    for project_id, info in EXCEL_FILES.items()
                }
                
                selected_project_display = st.selectbox(
                    "–ü—Ä–æ–µ–∫—Ç:",
                    options=list(project_options.keys())
                )
                
                selected_project = project_options[selected_project_display]
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
                selected_project = None
        else:
            selected_project = None
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.markdown(f"**–ü—Ä–æ–µ–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:** {len(EXCEL_FILES)}")
        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.cache_data.clear()
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if page == "üìä –°–≤–æ–¥–Ω–∞—è –¥–∞—à–±–æ—Ä–¥":
        create_summary_dashboard()
    elif page == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏":
        show_project_management()
    elif page == "üéØ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–∞" and selected_project:
        show_project_details(selected_project)
    else:
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

if __name__ == "__main__":
    main() 
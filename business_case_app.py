import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime, timedelta
import uuid
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import tempfile
import shutil
import numpy as np
from pathlib import Path
import openpyxl

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="SmartPM | L0-L5 Project Management",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
EXCEL_FILES = {
    "mikhailenko": {
        "name": "–î–∏–Ω–∞—Å—Ç–∏—è –í—Ä–∞—á–µ–π - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏", 
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ú–∏—Ö–Ω–µ–Ω–∫–æ_–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞.xlsx",
        "level": "L3",
        "owner": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–µ–Ω–∫–æ",
        "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ —Å–µ—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    },
    "zyryanova": {
        "name": "–ö–≠–í - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ó—ã—Ä—è–Ω–æ–≤–∞.xlsx", 
        "level": "L2",
        "owner": "–ó—ã—Ä—è–Ω–æ–≤–∞",
        "description": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ö–≠–í —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    },
    "amerkhanov": {
        "name": "Lead to Appointment - –ö–æ–Ω–≤–µ—Ä—Å–∏—è",
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å. –†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤.xlsx",
        "level": "L4", 
        "owner": "–†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤",
        "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ª–∏–¥–æ–≤ –≤ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º—ã"
    }
}

SECTION_NAMES = {
    "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": {
        "icon": "üìã",
        "description": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ"
    },
    "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ": {
        "icon": "üí∞", 
        "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã"
    },
    "c. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã": {
        "icon": "üìä",
        "description": "–†–∞—Å—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
    },
    "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞": {
        "icon": "üìÖ",
        "description": "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞"
    },
    "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞": {
        "icon": "üìà",
        "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    },
    "f. –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤": {
        "icon": "‚ö°",
        "description": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"
    }
}

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è L0-L5 –¥–∏–∑–∞–π–Ω–∞
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .level-card {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 5px solid #3b82f6;
        margin: 1rem 0;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    
    .level-header {
        font-size: 1.2rem;
        font-weight: bold;
        color: #1e40af;
        margin-bottom: 0.5rem;
    }
    
    .project-metric {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .wave-header {
        background: linear-gradient(45deg, #0f172a, #1e293b);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }
    
    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
    
    .status-on-track { background-color: #10b981; }
    .status-at-risk { background-color: #f59e0b; }
    .status-delayed { background-color: #ef4444; }
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_business_case_data(business_case_id):
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        if business_case_id not in EXCEL_FILES:
            return None
            
        file_path = EXCEL_FILES[business_case_id]["file"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
        excel_data = pd.read_excel(file_path, sheet_name=None, engine='openpyxl')
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleaned_data = {}
        for sheet_name, df in excel_data.items():
            cleaned_df = clean_dataframe(df)
            if not cleaned_df.empty:
                cleaned_data[sheet_name] = cleaned_df
        
        return {
            "info": EXCEL_FILES[business_case_id],
            "data": cleaned_data
        }
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return None

def clean_dataframe(df):
    """–û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º DataFrame"""
    if df.empty:
        return df
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cleaned_df = df.copy()
    
    # 1. –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
    cleaned_df = cleaned_df.dropna(how='all').dropna(axis=1, how='all')
    
    # 2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    new_columns = []
    for i, col in enumerate(cleaned_df.columns):
        col_str = str(col)
        if col_str.startswith('Unnamed:') or col_str.isdigit() or col_str.strip() == '' or col_str == 'nan':
            new_columns.append(f"–°—Ç–æ–ª–±–µ—Ü_{i+1}")
        else:
            new_columns.append(col_str)
    
    cleaned_df.columns = new_columns
    
    # 3. –ó–∞–º–µ–Ω—è–µ–º NaN –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    cleaned_df = cleaned_df.fillna('')
    
    # 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å data_editor
    for col in cleaned_df.columns:
        try:
            cleaned_df[col] = cleaned_df[col].astype(str)
            cleaned_df[col] = cleaned_df[col].replace(['nan', 'None', '<NA>', 'NaT'], '')
        except Exception:
            # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            cleaned_df[col] = ''
    
    # 5. –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ
    mask = cleaned_df.apply(lambda row: all(str(val).strip() == '' for val in row), axis=1)
    cleaned_df = cleaned_df[~mask]
    
    return cleaned_df

def get_project_level_color(level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"""
    colors = {
        "L0": "#dc2626",  # –ö—Ä–∞—Å–Ω—ã–π
        "L1": "#ea580c",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π  
        "L2": "#ca8a04",  # –ñ–µ–ª—Ç—ã–π
        "L3": "#16a34a",  # –ó–µ–ª–µ–Ω—ã–π
        "L4": "#2563eb",  # –°–∏–Ω–∏–π
        "L5": "#7c3aed"   # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
    }
    return colors.get(level, "#6b7280")

def create_wave_dashboard():
    """–°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∞—à–±–æ—Ä–¥ –≤ —Å—Ç–∏–ª–µ McKinsey Wave"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div class="main-header">
        <h1>üéØ SmartPM | McKinsey Wave Style</h1>
        <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ L0-L5 ‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å—ã</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    all_projects_data = {}
    for project_id in EXCEL_FILES.keys():
        data = load_business_case_data(project_id)
        if data:
            all_projects_data[project_id] = data
    
    if not all_projects_data:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="project-metric">
            <h3 style="color: #1e40af; margin: 0;">–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
            <h2 style="color: #1f2937; margin: 0;">{}</h2>
        </div>
        """.format(len(all_projects_data)), unsafe_allow_html=True)
    
    with col2:
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç 2025
        total_effect_2025 = 0
        for project_data in all_projects_data.values():
            finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
            if not finance_data.empty and "2025" in finance_data.columns:
                try:
                    effect = float(finance_data["2025"].iloc[0]) if len(finance_data) > 0 else 0
                    total_effect_2025 += effect
                except:
                    pass
        
        st.markdown("""
        <div class="project-metric">
            <h3 style="color: #059669; margin: 0;">–≠—Ñ—Ñ–µ–∫—Ç 2025</h3>
            <h2 style="color: #1f2937; margin: 0;">{:.0f} –º–ª–Ω ‚ÇΩ</h2>
        </div>
        """.format(total_effect_2025), unsafe_allow_html=True)
    
    with col3:
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã (–≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
        active_projects = len([p for p in all_projects_data.values() if p])
        st.markdown("""
        <div class="project-metric">
            <h3 style="color: #7c3aed; margin: 0;">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</h3>
            <h2 style="color: #1f2937; margin: 0;">{}</h2>
        </div>
        """.format(active_projects), unsafe_allow_html=True)
    
    with col4:
        # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–æ–≤
        levels = [info["level"] for info in EXCEL_FILES.values()]
        avg_level = sum([int(l[1:]) for l in levels]) / len(levels) if levels else 0
        st.markdown("""
        <div class="project-metric">
            <h3 style="color: #dc2626; margin: 0;">–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å</h3>
            <h2 style="color: #1f2937; margin: 0;">L{:.1f}</h2>
        </div>
        """.format(avg_level), unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # –ü—Ä–æ–µ–∫—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º L0-L5
    st.markdown("""
    <div class="wave-header">
        <h2 style="margin: 0;">üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º L0-L5</h2>
        <p style="margin: 0.5rem 0 0 0;">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –∑—Ä–µ–ª–æ—Å—Ç–∏ McKinsey Wave</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    projects_by_level = {}
    for project_id, project_info in EXCEL_FILES.items():
        level = project_info["level"]
        if level not in projects_by_level:
            projects_by_level[level] = []
        projects_by_level[level].append((project_id, project_info))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    for level in ["L0", "L1", "L2", "L3", "L4", "L5"]:
        if level in projects_by_level:
            projects = projects_by_level[level]
            color = get_project_level_color(level)
            
            st.markdown(f"""
            <div class="level-card" style="border-left-color: {color};">
                <div class="level-header" style="color: {color};">
                    {level} ‚Ä¢ {len(projects)} –ø—Ä–æ–µ–∫—Ç(–æ–≤)
                </div>
            """, unsafe_allow_html=True)
            
            for project_id, project_info in projects:
                project_data = all_projects_data.get(project_id)
                status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if project_data else "‚ùå –û—à–∏–±–∫–∞"
                status_class = "status-on-track" if project_data else "status-delayed"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                financial_effect = 0
                if project_data:
                    finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
                    if not finance_data.empty and "2025" in finance_data.columns:
                        try:
                            financial_effect = float(finance_data["2025"].iloc[0]) if len(finance_data) > 0 else 0
                        except:
                            pass
                
                col1, col2, col3 = st.columns([3, 1, 1])
                with col1:
                    st.markdown(f"""
                    <span class="status-indicator {status_class}"></span>
                    <strong>{project_info['name']}</strong><br>
                    <small style="color: #6b7280;">{project_info['description'][:100]}...</small>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div style="text-align: center;">
                        <strong style="color: {color};">{financial_effect:.0f} –º–ª–Ω ‚ÇΩ</strong><br>
                        <small style="color: #6b7280;">–≠—Ñ—Ñ–µ–∫—Ç 2025</small>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    if st.button(f"üìã –î–µ—Ç–∞–ª–∏", key=f"view_{project_id}"):
                        st.session_state.selected_project = project_id
                        st.session_state.page = "project_details"
                        st.rerun()
            
            st.markdown("</div>", unsafe_allow_html=True)
        else:
            # –ü—É—Å—Ç–æ–π —É—Ä–æ–≤–µ–Ω—å
            color = get_project_level_color(level)
            st.markdown(f"""
            <div class="level-card" style="border-left-color: {color}; opacity: 0.5;">
                <div class="level-header" style="color: {color};">
                    {level} ‚Ä¢ 0 –ø—Ä–æ–µ–∫—Ç–æ–≤
                </div>
                <p style="color: #6b7280; margin: 0;">–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è</p>
            </div>
            """, unsafe_allow_html=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    
    with col1:
        # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_counts = {}
        for project_info in EXCEL_FILES.values():
            level = project_info["level"]
            level_counts[level] = level_counts.get(level, 0) + 1
        
        fig_pie = px.pie(
            values=list(level_counts.values()),
            names=list(level_counts.keys()),
            title="üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º",
            color_discrete_map={level: get_project_level_color(level) for level in level_counts.keys()}
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    with col2:
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        chart_data = []
        for project_id, project_info in EXCEL_FILES.items():
            project_data = all_projects_data.get(project_id)
            if project_data:
                finance_data = project_data["data"].get("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", pd.DataFrame())
                if not finance_data.empty and "2025" in finance_data.columns:
                    try:
                        effect = float(finance_data["2025"].iloc[0]) if len(finance_data) > 0 else 0
                        chart_data.append({
                            "–ü—Ä–æ–µ–∫—Ç": project_info["name"][:20] + "...",
                            "–≠—Ñ—Ñ–µ–∫—Ç": effect,
                            "–£—Ä–æ–≤–µ–Ω—å": project_info["level"]
                        })
                    except:
                        pass
        
        if chart_data:
            chart_df = pd.DataFrame(chart_data)
            fig_bar = px.bar(
                chart_df, 
                x="–≠—Ñ—Ñ–µ–∫—Ç", 
                y="–ü—Ä–æ–µ–∫—Ç",
                color="–£—Ä–æ–≤–µ–Ω—å",
                title="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç 2025",
                color_discrete_map={level: get_project_level_color(level) for level in chart_df["–£—Ä–æ–≤–µ–Ω—å"].unique()}
            )
            fig_bar.update_layout(yaxis={'categoryorder': 'total ascending'})
            st.plotly_chart(fig_bar, use_container_width=True)

def show_project_details(project_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    if project_id not in EXCEL_FILES:
        st.error("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    project_info = EXCEL_FILES[project_id]
    project_data = load_business_case_data(project_id)
    
    if not project_data:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    level_color = get_project_level_color(project_info["level"])
    st.markdown(f"""
    <div class="wave-header">
        <h1 style="margin: 0;">
            <span style="background: {level_color}; color: white; padding: 0.3rem 0.8rem; border-radius: 20px; font-size: 0.8rem;">
                {project_info["level"]}
            </span>
            {project_info["name"]}
        </h1>
        <p style="margin: 0.5rem 0 0 0;">{project_info["description"]}</p>
        <p style="margin: 0.2rem 0 0 0; opacity: 0.8;">üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {project_info["owner"]}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –†–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    sections = {
        "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã": {"icon": "üìã", "description": "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"},
        "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ": {"icon": "üí∞", "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ ROI"},
        "c. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã": {"icon": "üßÆ", "description": "–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è"},
        "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞": {"icon": "üìÖ", "description": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –∏ —ç—Ç–∞–ø—ã –ø—Ä–æ–µ–∫—Ç–∞"},
        "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞": {"icon": "üìà", "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"},
        "f. –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤": {"icon": "üéØ", "description": "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å"}
    }
    
    # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    tabs = st.tabs([f"{info['icon']} {key}" for key, info in sections.items()])
    
    for i, (section_key, section_info) in enumerate(sections.items()):
        with tabs[i]:
            st.subheader(f"{section_info['icon']} {section_key}")
            st.caption(section_info['description'])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞
            section_data = project_data["data"].get(section_key, pd.DataFrame())
            
            if section_data.empty:
                st.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section_key}'")
                continue
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if section_key == "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞":
                show_gantt_chart(section_data)
            elif section_key == "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞":
                show_monitoring_chart(section_data)
            elif section_key == "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ":
                show_financial_impact(section_data)
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ '{section_key}'", key=f"refresh_{section_key}"):
                    st.cache_data.clear()
                    st.rerun()
                
                edited_df = st.data_editor(
                    section_data,
                    use_container_width=True,
                    num_rows="dynamic",
                    key=f"editor_{project_id}_{section_key}"
                )
                
                if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ '{section_key}'", key=f"save_{section_key}"):
                    st.success(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '{section_key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def show_gantt_chart(gantt_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞"""
    if gantt_data.empty:
        st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞")
        st.dataframe(gantt_data, use_container_width=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìã –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
    edited_df = st.data_editor(
        gantt_data,
        use_container_width=True,
        num_rows="dynamic"
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    try:
        if len(gantt_data.columns) >= 3:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∑–∞–¥–∞—á–∏, –≤—Ç–æ—Ä–∞—è - –Ω–∞—á–∞–ª–æ, —Ç—Ä–µ—Ç—å—è - –∫–æ–Ω–µ—Ü
            tasks_col = gantt_data.columns[0]
            start_col = gantt_data.columns[1] 
            end_col = gantt_data.columns[2]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
            gantt_copy = gantt_data.copy()
            gantt_copy[start_col] = pd.to_datetime(gantt_copy[start_col], errors='coerce')
            gantt_copy[end_col] = pd.to_datetime(gantt_copy[end_col], errors='coerce')
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            valid_rows = gantt_copy.dropna(subset=[start_col, end_col])
            
            if not valid_rows.empty:
                fig = px.timeline(
                    valid_rows,
                    x_start=start_col,
                    x_end=end_col, 
                    y=tasks_col,
                    title="üìÖ –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"
                )
                fig.update_yaxes(autorange="reversed")
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞")
        
    except Exception as e:
        st.info(f"‚ÑπÔ∏è –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

def show_monitoring_chart(monitoring_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if monitoring_data.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return
    
    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    monitoring_data = monitoring_data.dropna(how='all').dropna(axis=1, how='all')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö
    if not monitoring_data.empty:
        # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        edited_df = st.data_editor(
            monitoring_data,
            use_container_width=True,
            num_rows="dynamic"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫
        try:
            if len(monitoring_data.columns) > 1:
                numeric_cols = []
                for col in monitoring_data.columns[1:]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    sample_values = monitoring_data[col].dropna().head(5)
                    has_numeric = False
                    
                    for val in sample_values:
                        try:
                            float(str(val).replace(',', '.').replace('‚ÇΩ', '').replace('%', '').strip())
                            has_numeric = True
                            break
                        except:
                            continue
                    
                    if has_numeric:
                        numeric_cols.append(col)
                
                if numeric_cols:
                    fig = go.Figure()
                    x_values = monitoring_data[monitoring_data.columns[0]].tolist()
                    
                    for col in numeric_cols:
                        y_values = []
                        for val in monitoring_data[col]:
                            try:
                                clean_val = str(val).replace(',', '.').replace('‚ÇΩ', '').replace('%', '').strip()
                                y_values.append(float(clean_val))
                            except:
                                y_values.append(0)
                        
                        fig.add_trace(go.Scatter(
                            x=x_values,
                            y=y_values,
                            mode='lines+markers',
                            name=col,
                            line=dict(width=3),
                            marker=dict(size=8)
                        ))
                    
                    fig.update_layout(
                        title="üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                        xaxis_title="–ü–µ—Ä–∏–æ–¥",
                        yaxis_title="–ó–Ω–∞—á–µ–Ω–∏–µ",
                        template='plotly_white'
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("‚ÑπÔ∏è –ù–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            
        except Exception as e:
            st.info(f"‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    else:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def show_financial_impact(finance_data):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    if finance_data.empty:
        st.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    edited_df = st.data_editor(
        finance_data,
        use_container_width=True,
        num_rows="dynamic"
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –≥–æ–¥–∞–º
    if len(finance_data) > 0:
        years = ["2025", "2026", "2027"]
        year_data = []
        
        for year in years:
            if year in finance_data.columns:
                try:
                    value = float(finance_data[year].iloc[0])
                    year_data.append({"–ì–æ–¥": year, "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": value})
                except:
                    year_data.append({"–ì–æ–¥": year, "–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)": 0})
        
        if year_data:
            year_df = pd.DataFrame(year_data)
            fig = px.bar(year_df, x="–ì–æ–¥", y="–≠—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω ‚ÇΩ)", 
                        title="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –≥–æ–¥–∞–º")
            st.plotly_chart(fig, use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 1rem; background: linear-gradient(45deg, #1e3a8a, #3b82f6); border-radius: 10px; color: white; margin-bottom: 1rem;">
            <h2 style="margin: 0;">üéØ SmartPM</h2>
            <p style="margin: 0;">McKinsey Wave Style</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        page = st.selectbox(
            "üìã –ù–∞–≤–∏–≥–∞—Ü–∏—è",
            ["üè† –ì–ª–∞–≤–Ω–∞—è –¥–∞—à–±–æ—Ä–¥", "üéØ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"],
            key="main_nav"
        )
        
        if page == "üéØ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞":
            if EXCEL_FILES:
                st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:")
                project_options = {
                    f"{info['level']} ‚Ä¢ {info['name']}": project_id 
                    for project_id, info in EXCEL_FILES.items()
                }
                
                selected_project_display = st.selectbox(
                    "–ü—Ä–æ–µ–∫—Ç:",
                    options=list(project_options.keys()),
                    key="project_selector"
                )
                
                selected_project = project_options[selected_project_display]
            else:
                st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
                selected_project = None
        else:
            selected_project = None
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_stats = {}
        for info in EXCEL_FILES.values():
            level = info["level"]
            level_stats[level] = level_stats.get(level, 0) + 1
        
        for level in ["L0", "L1", "L2", "L3", "L4", "L5"]:
            count = level_stats.get(level, 0)
            color = get_project_level_color(level)
            st.markdown(f"""
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 0.2rem 0;">
                <span style="color: {color}; font-weight: bold;">{level}</span>
                <span>{count} –ø—Ä–æ–µ–∫—Ç(–æ–≤)</span>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.cache_data.clear()
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if page == "üè† –ì–ª–∞–≤–Ω–∞—è –¥–∞—à–±–æ—Ä–¥":
        create_wave_dashboard()
    elif page == "üéØ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞" and selected_project:
        show_project_details(selected_project)
    else:
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

if __name__ == "__main__":
    main() 
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, date
import os
import json
import uuid

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞–º–∏",
    page_icon="üíº",
    layout="wide"
)

# –ù–æ–≤—ã–µ Excel —Ñ–∞–π–ª—ã
EXCEL_FILES = [
    "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ú–∏—Ö–Ω–µ–Ω–∫–æ_–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞.xlsx",
    "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ó—ã—Ä—è–Ω–æ–≤–∞.xlsx",
    "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å. –†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤.xlsx"
]
PROJECTS_FILE = "projects_database.json"
CHANGELOG_FILE = "changelog.json"

# L-—Å—Ç–∞—Ç—É—Å—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
L_STATUSES = {
    "L0": {"name": "–ò–¥–µ—è", "description": "–°–±–æ—Ä –≤—Å–µ—Ö –∏–¥–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏ –∏–ª–∏ –º–∞—Å—à—Ç–∞–±–∞"},
    "L1": {"name": "–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ", "description": "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –ø—Ä–∏–∑–Ω–∞–Ω–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–π, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ"},
    "L2": {"name": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"},
    "L3": {"name": "–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ", "description": "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º—É –ø–ª–∞–Ω—É, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"},
    "L4": {"name": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "description": "–í—Å–µ —à–∞–≥–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"},
    "L5": {"name": "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", "description": "–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ –±–∏–∑–Ω–µ—Å-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"}
}

# –ü—Ä–æ–µ–∫—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
PROJECTS_INFO = {
    "business_case_1": {
        "name": "–î–∏–Ω–∞—Å—Ç–∏—è –í—Ä–∞—á–µ–π - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏",
        "owner": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–µ–Ω–∫–æ", 
        "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ —Å–µ—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
        "status": "L3",
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ú–∏—Ö–Ω–µ–Ω–∫–æ_–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞.xlsx"
    },
    "business_case_2": {
        "name": "–ö–≠–í - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
        "owner": "–ó—ã—Ä—è–Ω–æ–≤–∞",
        "description": "–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ö–≠–í —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 
        "status": "L2",
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å_–ó—ã—Ä—è–Ω–æ–≤–∞.xlsx"
    },
    "business_case_3": {
        "name": "Lead to Appointment - –ö–æ–Ω–≤–µ—Ä—Å–∏—è",
        "owner": "–†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤",
        "description": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ª–∏–¥–æ–≤ –≤ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º—ã",
        "status": "L4", 
        "file": "–ë–∏–∑–Ω–µ—Å_–∫–µ–π—Å. –†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤.xlsx"
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'current_view' not in st.session_state:
    st.session_state.current_view = "projects_list"  # projects_list, project_detail, new_project, changelog

if 'selected_project' not in st.session_state:
    st.session_state.selected_project = None

if 'selected_section' not in st.session_state:
    st.session_state.selected_section = None

if 'projects_database' not in st.session_state:
    st.session_state.projects_database = {}

if 'changelog' not in st.session_state:
    st.session_state.changelog = []

def generate_sample_status_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤"""
    status_data = pd.DataFrame({
        "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞": [
            "–î–∏–Ω–∞—Å—Ç–∏—è –í—Ä–∞—á–µ–π - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏",
            "–ö–≠–í - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", 
            "Lead to Appointment - –ö–æ–Ω–≤–µ—Ä—Å–∏—è"
        ],
        "–°—Ç–∞—Ç—É—Å": ["L3", "L2", "L4"],
        "–í–ª–∞–¥–µ–ª–µ—Ü": [
            "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–µ–Ω–∫–æ",
            "–ó—ã—Ä—è–Ω–æ–≤–∞", 
            "–†—É—Å–ª–∞–Ω –ê–º–µ—Ä—Ö–∞–Ω–æ–≤"
        ],
        "–ü—Ä–æ–≥—Ä–µ—Å—Å (%)": [75, 45, 90],
        "–ü–ª–∞–Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω —Ä—É–±)": [35, 120, 35],
        "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç (–º–ª–Ω —Ä—É–±)": [28, 0, 30],
        "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞": [
            "2024-01-15", "2024-03-01", "2024-02-01"
        ],
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ": [
            "2024-12-31", "2025-01-31", "2024-11-30"
        ],
        "–ö–ª—é—á–µ–≤—ã–µ –≤–µ—Ö–∏": [
            "–¶–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏",
            "–ê–Ω–∞–ª–∏–∑ –ö–≠–í, —É—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–†–æ–ª–µ–≤–∫–∏, –æ–±—É—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"
        ],
        "–†–∏—Å–∫–∏": [
            "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
            "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            "–í—ã—Å–æ–∫–∞—è —Ç–µ–∫—É—á–µ—Å—Ç—å –∫–∞–¥—Ä–æ–≤"
        ],
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": [
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è",
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "–û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        ]
    })
    return status_data

@st.cache_data
def load_excel_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
    all_data = {}
    
    for excel_file in EXCEL_FILES:
        try:
            if os.path.exists(excel_file):
                excel_data = pd.read_excel(excel_file, sheet_name=None, engine='openpyxl')
                filename = os.path.basename(excel_file).replace('.xlsx', '')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º project_id –ø–æ —Ñ–∞–π–ª—É
                if "–ú–∏—Ö–Ω–µ–Ω–∫–æ" in excel_file:
                    project_id = "business_case_1"
                elif "–ó—ã—Ä—è–Ω–æ–≤–∞" in excel_file:
                    project_id = "business_case_2"
                elif "–ê–º–µ—Ä—Ö–∞–Ω–æ–≤" in excel_file:
                    project_id = "business_case_3"
                else:
                    project_id = f"project_{len(all_data) + 1}"
                
                for sheet_name, df in excel_data.items():
                    # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    cleaned_df = df.copy()
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
                    cleaned_df = cleaned_df.dropna(how='all').dropna(axis=1, how='all')
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    new_columns = []
                    for i, col in enumerate(cleaned_df.columns):
                        col_str = str(col)
                        if col_str.startswith('Unnamed:') or col_str.isdigit() or col_str in ['nan', 'None'] or col_str.strip() == '':
                            # –î–∞–µ–º –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                            if sheet_name == "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã":
                                new_columns.append(f"–ü–æ–ª–µ_{i+1}")
                            elif sheet_name == "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ":
                                new_columns.append(f"–§–∏–Ω–∞–Ω—Å—ã_{i+1}")
                            else:
                                new_columns.append(f"–°—Ç–æ–ª–±–µ—Ü_{i+1}")
                        else:
                            new_columns.append(col_str)
                    
                    cleaned_df.columns = new_columns
                    
                    # –û—á–∏—â–∞–µ–º –æ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
                    cleaned_df = cleaned_df.fillna('')
                    for col in cleaned_df.columns:
                        try:
                            cleaned_df[col] = cleaned_df[col].astype(str)
                            cleaned_df[col] = cleaned_df[col].replace('nan', '')
                            cleaned_df[col] = cleaned_df[col].replace('None', '')
                            cleaned_df[col] = cleaned_df[col].replace('<NA>', '')
                        except:
                            cleaned_df[col] = ''
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–µ
                    mask = cleaned_df.apply(lambda row: all(str(val).strip() == '' for val in row), axis=1)
                    cleaned_df = cleaned_df[~mask]
                    
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –¥–æ–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    if len(cleaned_df) == 0:
                        if sheet_name == "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã":
                            cleaned_df = pd.DataFrame({
                                "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", "–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É"],
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": ["", "", ""],
                                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": ["", "", ""]
                            })
                        else:
                            cleaned_df = pd.DataFrame({
                                "–ü–∞—Ä–∞–º–µ—Ç—Ä": [""],
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": [""],
                                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": [""]
                            })
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–ª—é—á–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Ä–∞–∑–¥–µ–ª–∞
                    section_key = f"{project_id}_{sheet_name}"
                    all_data[section_key] = cleaned_df.copy()
                    
                    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –ø—Ä–æ—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    all_data[sheet_name] = cleaned_df.copy()
                
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {filename}")
                
        except Exception as e:
            st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {excel_file}: {e}")
            continue
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not all_data:
        default_sections = [
            "a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã",
            "b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "c. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
            "d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞",
            "e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞",
            "f. –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤"
        ]
        
        for section in default_sections:
            empty_df = pd.DataFrame({
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": ["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ Excel —Ñ–∞–π–ª–æ–≤"],
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": [""]
            })
            all_data[section] = empty_df
    
    return all_data

def load_changelog():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        if os.path.exists(CHANGELOG_FILE):
            with open(CHANGELOG_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except:
        return []

def save_changelog(changelog):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        with open(CHANGELOG_FILE, 'w', encoding='utf-8') as f:
            json.dump(changelog, f, ensure_ascii=False, indent=2)
        return True
    except:
        return False

def add_changelog_entry(project_id, action, details, user="–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    entry = {
        "timestamp": datetime.now().isoformat(),
        "project_id": project_id,
        "user": user,
        "action": action,
        "details": details
    }
    
    changelog = load_changelog()
    changelog.append(entry)
    save_changelog(changelog)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    st.session_state.changelog = changelog

def load_projects_database():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        if os.path.exists(PROJECTS_FILE):
            with open(PROJECTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –±–∞–∑—É –∏–∑ PROJECTS_INFO
            return PROJECTS_INFO.copy()
    except:
        return PROJECTS_INFO.copy()

def save_projects_database(projects_db):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        with open(PROJECTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(projects_db, f, ensure_ascii=False, indent=2)
        return True
    except:
        return False

def get_project_info():
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö"""
    return load_projects_database()

def create_new_project(project_data):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    projects_db = load_projects_database()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
    new_id = f"business_case_{len(projects_db) + 1}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    projects_db[new_id] = project_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if save_projects_database(projects_db):
        st.session_state.projects_database = projects_db
        add_changelog_entry(new_id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {project_data['name']}")
        return new_id
    return None

def get_column_config(df):
    """–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è data_editor"""
    config = {}
    for col in df.columns:
        config[col] = st.column_config.TextColumn(
            col,
            help=f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ: {col}",
            max_chars=500,
            width="medium"
        )
    return config

def save_excel_data(data_dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ Excel
    st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏")
    return True

def show_l_status_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ L-—Å—Ç–∞—Ç—É—Å–∞—Ö"""
    st.markdown("### üìä L-—Å—Ç–∞—Ç—É—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    for status, info in L_STATUSES.items():
        with st.expander(f"{status}: {info['name']}"):
            st.write(info['description'])

def show_projects_list():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    st.title("üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∫–µ–π—Å–∞–º–∏")
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("üìù –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"):
            st.session_state.current_view = "new_project"
            st.rerun()
    
    with col2:
        if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
            st.session_state.current_view = "analytics"
            st.rerun()
    
    with col3:
        if st.button("üìã –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"):
            st.session_state.current_view = "changelog"
            st.rerun()
    
    with col4:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.cache_data.clear()
            st.rerun()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
    projects_db = get_project_info()
    
    if not projects_db:
        st.warning("üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ L-—Å—Ç–∞—Ç—É—Å–∞–º
    st.markdown("### üìä –ü—Ä–æ–µ–∫—Ç—ã –ø–æ L-—Å—Ç–∞—Ç—É—Å–∞–º")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ L-—Å—Ç–∞—Ç—É—Å–∞
    status_tabs = st.tabs([f"{status}: {info['name']}" for status, info in L_STATUSES.items()])
    
    for i, (status, status_info) in enumerate(L_STATUSES.items()):
        with status_tabs[i]:
            st.markdown(f"**{status_info['description']}**")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_projects = {k: v for k, v in projects_db.items() if v.get('status') == status}
            
            if status_projects:
                for project_id, project_info in status_projects.items():
                    with st.container():
                        col1, col2, col3 = st.columns([3, 1, 1])
                        
                        with col1:
                            st.markdown(f"**{project_info['name']}**")
                            st.caption(f"üë§ {project_info['owner']}")
                            st.caption(project_info['description'])
                        
                        with col2:
                            status_color = {
                                "L0": "üî¥", "L1": "üü†", "L2": "üü°",
                                "L3": "üü¢", "L4": "üîµ", "L5": "üü£"
                            }
                            st.markdown(f"### {status_color.get(status, '‚ö™')} {status}")
                        
                        with col3:
                            if st.button("üìã –û—Ç–∫—Ä—ã—Ç—å", key=f"open_{project_id}"):
                                st.session_state.selected_project = project_id
                                st.session_state.current_view = "project_detail"
                                st.rerun()
                        
                        st.markdown("---")
            else:
                st.info(f"üì≠ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    st.markdown("### üìà –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤", len(projects_db))
    
    with col2:
        active_projects = len([p for p in projects_db.values() if p.get('status') in ['L1', 'L2', 'L3']])
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", active_projects)
    
    with col3:
        completed_projects = len([p for p in projects_db.values() if p.get('status') in ['L4', 'L5']])
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", completed_projects)

def show_new_project_form():
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    st.title("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
    
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
        st.session_state.current_view = "projects_list"
        st.rerun()
    
    st.markdown("---")
    
    with st.form("new_project_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            name = st.text_input("üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *")
            owner = st.text_input("üë§ –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ *")
            status = st.selectbox("üìä L-—Å—Ç–∞—Ç—É—Å", options=list(L_STATUSES.keys()),
                                format_func=lambda x: f"{x}: {L_STATUSES[x]['name']}")
        
        with col2:
            description = st.text_area("üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *", height=100)
            file_option = st.selectbox("üìÅ Excel —Ñ–∞–π–ª", ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π"] + EXCEL_FILES)
            
        submitted = st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", type="primary")
        
        if submitted:
            if not name or not owner or not description:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            else:
                project_data = {
                    "name": name,
                    "owner": owner,
                    "description": description,
                    "status": status,
                    "file": file_option if file_option != "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π" else None,
                    "created_date": datetime.now().isoformat(),
                    "updated_date": datetime.now().isoformat()
                }
                
                new_id = create_new_project(project_data)
                if new_id:
                    st.success(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {new_id}")
                    st.session_state.selected_project = new_id
                    st.session_state.current_view = "project_detail"
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")

def show_project_detail():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    if not st.session_state.selected_project:
        st.error("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    project_id = st.session_state.selected_project
    projects_db = get_project_info()
    
    if project_id not in projects_db:
        st.error("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    project_info = projects_db[project_id]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    col1, col2 = st.columns([3, 1])
    with col1:
        st.title(f"üéØ {project_info['name']}")
        st.caption(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {project_info['owner']}")
    
    with col2:
        if st.button("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤"):
            st.session_state.current_view = "projects_list"
            st.rerun()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status = project_info.get('status', 'L0')
        status_color = {
            "L0": "üî¥", "L1": "üü†", "L2": "üü°",
            "L3": "üü¢", "L4": "üîµ", "L5": "üü£"
        }
        st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {status_color.get(status, '‚ö™')} {status} - {L_STATUSES[status]['name']}")
    
    with col2:
        if 'created_date' in project_info:
            created = datetime.fromisoformat(project_info['created_date']).strftime("%d.%m.%Y")
            st.markdown(f"**–°–æ–∑–¥–∞–Ω:** {created}")
    
    with col3:
        if 'updated_date' in project_info:
            updated = datetime.fromisoformat(project_info['updated_date']).strftime("%d.%m.%Y")
            st.markdown(f"**–û–±–Ω–æ–≤–ª–µ–Ω:** {updated}")
    
    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {project_info['description']}")
    st.markdown("---")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_dict = load_excel_data()
    
    # –†–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    sections = [
        ("a. –î–µ—Ç–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã", "üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"),
        ("b. –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ ROI"),
        ("c. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã", "üßÆ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã"),
        ("d. –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞", "üìÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"),
        ("e. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∞", "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
        ("f. –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤", "üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    ]
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
    section_tabs = st.tabs([f"{section[0]}" for section in sections])
    
    for i, (section_name, section_desc) in enumerate(sections):
        with section_tabs[i]:
            show_section_data(section_name, section_desc, project_id, data_dict)

def show_section_data(section_name, section_description, project_id, data_dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.subheader(section_description)
    
    # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∞
    section_key = f"{project_id}_{section_name}"
    
    if section_key in data_dict:
        df = data_dict[section_key].copy()
    elif section_name in data_dict:
        df = data_dict[section_name].copy()
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
        df = pd.DataFrame({
            "–ü–∞—Ä–∞–º–µ—Ç—Ä": [""],
            "–ó–Ω–∞—á–µ–Ω–∏–µ": [""],
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": [""]
        })
    
    if df.empty:
        st.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '{section_name}' –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
        if st.button(f"‚ûï –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{section_name}'", key=f"create_{section_name}"):
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            df = pd.DataFrame({
                "–ü–∞—Ä–∞–º–µ—Ç—Ä": ["–ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": ["–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"],
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": [""]
            })
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(f"‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É", key=f"add_row_{section_name}"):
            new_row = pd.DataFrame({col: [""] for col in df.columns}, index=[len(df)])
            df = pd.concat([df, new_row], ignore_index=True)
    
    with col2:
        if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key=f"refresh_{section_name}"):
            st.cache_data.clear()
            st.rerun()
    
    with col3:
        if st.button(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_{section_name}"):
            save_excel_data({section_key: df})
            add_changelog_entry(project_id, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", f"–û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–¥–µ–ª: {section_name}")
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    if not df.empty:
        try:
            edited_df = st.data_editor(
                df,
                use_container_width=True,
                num_rows="dynamic",
                column_config=get_column_config(df),
                key=f"editor_{project_id}_{section_name}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            st.caption(f"üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(edited_df)}")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.dataframe(df, use_container_width=True)

def show_changelog():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∂—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    st.title("üìã –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    if st.button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"):
        st.session_state.current_view = "projects_list"
        st.rerun()
    
    changelog = load_changelog()
    
    if not changelog:
        st.info("üì≠ –ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    changelog_sorted = sorted(changelog, key=lambda x: x['timestamp'], reverse=True)
    
    for entry in changelog_sorted:
        with st.container():
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                st.markdown(f"**{entry['action']}**")
                st.caption(entry['details'])
            
            with col2:
                timestamp = datetime.fromisoformat(entry['timestamp'])
                st.caption(f"üïí {timestamp.strftime('%d.%m.%Y %H:%M')}")
            
            with col3:
                st.caption(f"üë§ {entry['user']}")
                if 'project_id' in entry:
                    st.caption(f"üìÅ {entry['project_id']}")
            
            st.markdown("---")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if 'projects_database' not in st.session_state or not st.session_state.projects_database:
        st.session_state.projects_database = get_project_info()
    
    if 'changelog' not in st.session_state or not st.session_state.changelog:
        st.session_state.changelog = load_changelog()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ L-—Å—Ç–∞—Ç—É—Å–∞—Ö
    with st.sidebar:
        show_l_status_info()
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        st.markdown(f"**–ü—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:** {len(st.session_state.projects_database)}")
        st.markdown(f"**–ó–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ:** {len(st.session_state.changelog)}")
        st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    if st.session_state.current_view == "projects_list":
        show_projects_list()
    elif st.session_state.current_view == "project_detail":
        show_project_detail()
    elif st.session_state.current_view == "new_project":
        show_new_project_form()
    elif st.session_state.current_view == "changelog":
        show_changelog()
    else:
        show_projects_list()

if __name__ == "__main__":
    main() 